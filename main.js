(()=>{"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function n(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this._settings=e,this._formElement=t}var r,o;return r=n,(o=[{key:"_showInputError",value:function(e,t){var n=this._settings,r=n.inputErrorClass,o=n.errorClass,i=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(r),i.textContent=t,i.classList.add(o)}},{key:"_hideInputError",value:function(e){var t=this._settings,n=t.inputErrorClass,r=t.errorClass,o=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(n),o.textContent="",o.classList.remove(r)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_setEventListeners",value:function(){var t,n=this,r=this._settings.inputSelector;this.inputElements=function(t){if(Array.isArray(t))return e(t)}(t=this._formElement.querySelectorAll(r))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this.inputElements.forEach((function(e){e.addEventListener("input",(function(t){n._checkInputValidity(e),n._toggleButtonState()}))}))}},{key:"_isAllInputsValid",value:function(){return this.inputElements.every((function(e){return!0===e.validity.valid}))}},{key:"_toggleButtonState",value:function(){var e=this._settings,t=e.inactiveButtonClass,n=e.submitButtonSelector,r=this._formElement.querySelector(n);this._isAllInputsValid()?(r.disabled=!1,r.classList.remove(t)):(r.disabled=!0,r.classList.add(t))}},{key:"resetValidation",value:function(){var e=this;this.inputElements.forEach((function(t){e._hideInputError(t)})),this._toggleButtonState()}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&t(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),n}();const r=n;function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(t,n,r){var o=this,a=t.name,u=t.link;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"_handleLikeIcon",(function(e){return e.target.classList.toggle("card__like-button_active")})),i(this,"_handleDeleteCard",(function(){o._cardElement.remove(),o._cardElement=null})),i(this,"getCardElement",(function(){o._cardElement=o._cardTemplate.cloneNode(!0);var e=o._cardElement.querySelector(".card__title"),t=o._cardElement.querySelector(".card__image");return e.textContent=o._name,t.style.backgroundImage="url(".concat(o._link,")"),o._setEventListeners(),o._cardElement})),this._name=a,this._link=u,this._cardTemplate=document.querySelector(n).content.querySelector(".card"),this._handleCardClick=r}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){var e=this,t=this._cardElement.querySelector(".card__like-button"),n=this._cardElement.querySelector(".card__delete-button"),r=this._cardElement.querySelector(".card__image");t.addEventListener("click",this._handleLikeIcon),n.addEventListener("click",this._handleDeleteCard),r.addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"open",value:function(){this._popupElement.classList.add("popup_open"),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_open"),document.removeEventListener("keyup",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("popup__close-button"))&&e.close()}))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=y(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(this,arguments)}function y(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_(e)););return e}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function h(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function _(e){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(r);if(o){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleSubmit=t,n._formElement=n._popupElement.querySelector(".popup__form"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e,t={};return(e=this._formElement.querySelectorAll(".popup__form-input"),function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).forEach((function(e){var n=e.name,r=e.value;t[n]=r})),t}},{key:"setEventListeners",value:function(){var e=this;p(_(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault();var n=e._getInputValues();e._handleSubmit(n)}))}},{key:"close",value:function(){p(_(a.prototype),"close",this).call(this),this._formElement.reset()}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}function S(e,t){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},S(e,t)}function k(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(){return v(this,a),i.apply(this,arguments)}return t=a,(n=[{key:"open",value:function(e,t){g(j(a.prototype),"open",this).call(this);var n=this._popupElement.querySelector(".popup__preview-image"),r=this._popupElement.querySelector(".popup__preview-caption");n.src=e,r.textContent=t}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(c);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=items,this._renderer=r,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(t){var n=t.profileNameSelector,r=t.profileJobSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(n),this._profileJob=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._profileName.textContent,job:this._profileJob.textContent}}},{key:"setUserInfo",value:function(e,t){this._profileName.textContent=e,this._profileJob.textContent=t}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),q={inputSelector:".popup__form-input",submitButtonSelector:".popup__form-button",inactiveButtonClass:"popup__form-button_disabled",inputErrorClass:"popup__form-input_type_error",errorClass:"popup__form-error_visible"},T=document.querySelector(".popup_type_edit-profile"),A=document.querySelector(".popup_type_add-card"),R=T.querySelector(".popup__form_type_edit"),x=document.querySelector(".profile__add-button"),U=A.querySelector(".popup__form_type_add-card"),V=document.querySelector(".profile__edit-button"),B=document.querySelector(".popup__form-input_type_name"),D=document.querySelector(".popup__form-input_type_job");function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}document.querySelector(".cards__gallery");var J=new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t._baseUrl,this._headers=t._headers}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return fetch(this._baseUrl+"users/me/",{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject(e.statusText)}))}},{key:"getCards",value:function(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject(e.statusText)}))}},{key:"editProfile",value:function(e,t){return(fetch(this._baseUrl+"users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return e.ok?e.json():Promise.reject(e.statusText)}))}},{key:"addCard",value:function(e,t){return(fetch(this._baseUrl+"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return e.ok?e.json():Promise.reject(e.statusText)}))}}])&&N(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:" 493dfbd5-914b-4624-a274-ddbc55b172ae","Content-Type":"application/json"}});J.getUserInfo().then((function(e){Q.setUserInfo(e.name,e.job)})).catch(console.log),J.getCards().then((function(e){H.renderItems(e)})).catch(console.log);var M=new r(q,R),$=new r(q,U);M.enableValidation(),$.enableValidation();var z=function(e){var t=new a(e,"#card-template",(function(e,t){K.open(e,t)})).getCardElement();H.addItem(t)},H=new P({renderer:z},".cards__gallery"),F=new b(".popup_type_add-card",(function(e){J.addCard(e.card__title,e.link).then((function(e){z({name:e.name,link:e.link})})).catch(console.log),F.close()}));F.setEventListeners();var G=new b(".popup_type_edit-profile",(function(e){J.editProfile(e.name,e.job).then((function(t){Q.setUserInfo(e.name,e.job)})).catch(console.log).finally((function(){G.close()}))}));G.setEventListeners();var K=new O(".popup_type_preview");K.setEventListeners();var Q=new I({profileNameSelector:".profile__title",profileJobSelector:".profile__subtitle"});V.addEventListener("click",(function(){var e=Q.getUserInfo();B.value=e.name,D.value=e.job,M.resetValidation(),G.open()})),x.addEventListener("click",(function(){$.resetValidation(),F.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,